package edu.internet2.middleware.shibboleth.idp.ext.securityconfig;

import org.opensaml.xml.security.keyinfo.KeyInfoGeneratorManager;
import org.opensaml.xml.security.SecurityConfiguration;
import org.opensaml.xml.security.BasicSecurityConfiguration;
import org.opensaml.xml.Configuration;
import org.slf4j.LoggerFactory;
import org.opensaml.xml.security.keyinfo.KeyInfoGeneratorFactory;

import java.util.List;

import org.opensaml.xml.security.keyinfo.KeyInfoCredentialResolver;
import org.slf4j.Logger;
import org.springframework.beans.factory.InitializingBean;

public class OpensamlCustomSecurityConfigBean implements InitializingBean {
    private final Logger log;
    private String signatureAlgorithmRSA;
    private String signatureAlgorithmDSA;
    private String signatureAlgorithmEC;
    private String signatureAlgorithmAES;
    private String signatureAlgorithmDESede;
    private String signatureReferenceDigestMethod;
    private String signatureCanonicalizationAlgorithm;
    private Integer signatureHMACOutputLength;
    private String autoGeneratedDataEncryptionKeyAlgorithm;
    private String keyTransportEncryptionAlgorithmRSAofAES;
    private String keyTransportEncryptionAlgorithmRSAofDESede;
    private KeyInfoCredentialResolver defaultKeyInfoCredentialResolver;
    private List<KeyInfoGeneratorFactory> keyInfoGeneratorFactories;

    public OpensamlCustomSecurityConfigBean() {
        this.log = LoggerFactory.getLogger(OpensamlCustomSecurityConfigBean.class);
    }

    public void afterPropertiesSet() throws Exception {
        final SecurityConfiguration config = Configuration.getGlobalSecurityConfiguration();
        if (config instanceof BasicSecurityConfiguration) {
            // SIGNATURE DEBUG
            final String rsaAlgo = config.getSignatureAlgorithmURI("RSA");
            log.info("##### OpensamlCustomSecurityConfig start RSA algo: {}", rsaAlgo);
            //
            final BasicSecurityConfiguration basicConfig = (BasicSecurityConfiguration) Configuration.getGlobalSecurityConfiguration();
            this.handleSignatureParams(basicConfig);
            this.handleEncryptionParams(basicConfig);
            this.handleKeyInfoCredentialResolverParams(basicConfig);
            this.handleKeyInfoGeneratorParams(basicConfig);
            // SIGNATURE DEBUG
            final String rsaAlgo2 = config.getSignatureAlgorithmURI("RSA");
            log.info("##### OpensamlCustomSecurityConfig patched RSA algo: {}", rsaAlgo2);
            //
        } else {
            this.log.warn("Configuration.getGlobalSecurityConfiguration did not produce an instance of BasicSecurityConfiguration, could not apply custom security configuration settings: {}", (Object) ((config == null) ? "null" : config.getClass().getName()));
        }
    }

    public String getSignatureAlgorithmRSA() {
        return this.signatureAlgorithmRSA;
    }

    public void setSignatureAlgorithmRSA(final String algorithm) {
        this.signatureAlgorithmRSA = algorithm;
    }

    public String getSignatureAlgorithmDSA() {
        return this.signatureAlgorithmDSA;
    }

    public void setSignatureAlgorithmDSA(final String algorithm) {
        this.signatureAlgorithmDSA = algorithm;
    }

    public String getSignatureAlgorithmEC() {
        return this.signatureAlgorithmEC;
    }

    public void setSignatureAlgorithmEC(final String algorithm) {
        this.signatureAlgorithmEC = algorithm;
    }

    public String getSignatureAlgorithmAES() {
        return this.signatureAlgorithmAES;
    }

    public void setSignatureAlgorithmAES(final String algorithm) {
        this.signatureAlgorithmAES = algorithm;
    }

    public String getSignatureAlgorithmDESede() {
        return this.signatureAlgorithmDESede;
    }

    public void setSignatureAlgorithmDESede(final String algorithm) {
        this.signatureAlgorithmDESede = algorithm;
    }

    public String getSignatureReferenceDigestMethod() {
        return this.signatureReferenceDigestMethod;
    }

    public void setSignatureReferenceDigestMethod(final String algorithm) {
        this.signatureReferenceDigestMethod = algorithm;
    }

    public String getSignatureCanonicalizationAlgorithm() {
        return this.signatureCanonicalizationAlgorithm;
    }

    public void setSignatureCanonicalizationAlgorithm(final String algorithm) {
        this.signatureCanonicalizationAlgorithm = algorithm;
    }

    public Integer getSignatureHMACOutputLength() {
        return this.signatureHMACOutputLength;
    }

    public void setSignatureHMACOutputLength(final Integer length) {
        this.signatureHMACOutputLength = length;
    }

    public String getAutoGeneratedDataEncryptionKeyAlgorithm() {
        return this.autoGeneratedDataEncryptionKeyAlgorithm;
    }

    public void setAutoGeneratedDataEncryptionKeyAlgorithm(final String algorithm) {
        this.autoGeneratedDataEncryptionKeyAlgorithm = algorithm;
    }

    public String getKeyTransportEncryptionAlgorithmRSAofAES() {
        return this.keyTransportEncryptionAlgorithmRSAofAES;
    }

    public void setKeyTransportEncryptionAlgorithmRSAofAES(final String algorithm) {
        this.keyTransportEncryptionAlgorithmRSAofAES = algorithm;
    }

    public String getKeyTransportEncryptionAlgorithmRSAofDESede() {
        return this.keyTransportEncryptionAlgorithmRSAofDESede;
    }

    public void setKeyTransportEncryptionAlgorithmRSAofDESede(final String algorithm) {
        this.keyTransportEncryptionAlgorithmRSAofDESede = algorithm;
    }

    public KeyInfoCredentialResolver getDefaultKeyInfoCredentialResolver() {
        return this.defaultKeyInfoCredentialResolver;
    }

    public void setDefaultKeyInfoCredentialResolver(final KeyInfoCredentialResolver resolver) {
        this.defaultKeyInfoCredentialResolver = resolver;
    }

    public List<KeyInfoGeneratorFactory> getKeyInfoGeneratorFactories() {
        return this.keyInfoGeneratorFactories;
    }

    public void setKeyInfoGeneratorFactories(final List<KeyInfoGeneratorFactory> factories) {
        this.keyInfoGeneratorFactories = factories;
    }

    protected void handleSignatureParams(final BasicSecurityConfiguration basicConfig) {
        if (this.getSignatureAlgorithmRSA() != null) {
            basicConfig.registerSignatureAlgorithmURI("RSA", this.getSignatureAlgorithmRSA());
        }
        if (this.getSignatureAlgorithmDSA() != null) {
            basicConfig.registerSignatureAlgorithmURI("DSA", this.getSignatureAlgorithmDSA());
        }
        if (this.getSignatureAlgorithmEC() != null) {
            basicConfig.registerSignatureAlgorithmURI("EC", this.getSignatureAlgorithmEC());
        }
        if (this.getSignatureAlgorithmAES() != null) {
            basicConfig.registerSignatureAlgorithmURI("AES", this.getSignatureAlgorithmAES());
        }
        if (this.getSignatureAlgorithmDESede() != null) {
            basicConfig.registerSignatureAlgorithmURI("DESede", this.getSignatureAlgorithmDESede());
        }
        if (this.getSignatureReferenceDigestMethod() != null) {
            basicConfig.setSignatureReferenceDigestMethod(this.getSignatureReferenceDigestMethod());
        }
        if (this.getSignatureCanonicalizationAlgorithm() != null) {
            basicConfig.setSignatureCanonicalizationAlgorithm(this.getSignatureCanonicalizationAlgorithm());
        }
        if (this.getSignatureHMACOutputLength() != null) {
            basicConfig.setSignatureHMACOutputLength(this.getSignatureHMACOutputLength());
        }
    }

    protected void handleEncryptionParams(final BasicSecurityConfiguration basicConfig) {
        if (this.getKeyTransportEncryptionAlgorithmRSAofAES() != null) {
            basicConfig.registerKeyTransportEncryptionAlgorithmURI("RSA", (Integer) null, "AES", this.getKeyTransportEncryptionAlgorithmRSAofAES());
        }
        if (this.getKeyTransportEncryptionAlgorithmRSAofDESede() != null) {
            basicConfig.registerKeyTransportEncryptionAlgorithmURI("RSA", (Integer) null, "DESede", this.getKeyTransportEncryptionAlgorithmRSAofDESede());
        }
        if (this.getAutoGeneratedDataEncryptionKeyAlgorithm() != null) {
            basicConfig.setAutoGeneratedDataEncryptionKeyAlgorithmURI(this.getAutoGeneratedDataEncryptionKeyAlgorithm());
        }
    }

    protected void handleKeyInfoCredentialResolverParams(final BasicSecurityConfiguration basicConfig) {
        if (this.getDefaultKeyInfoCredentialResolver() != null) {
            basicConfig.setDefaultKeyInfoCredentialResolver(this.getDefaultKeyInfoCredentialResolver());
        }
    }

    protected void handleKeyInfoGeneratorParams(final BasicSecurityConfiguration basicConfig) {
        if (this.getKeyInfoGeneratorFactories() != null) {
            final KeyInfoGeneratorManager manager = basicConfig.getKeyInfoGeneratorManager().getDefaultManager();
            for (final KeyInfoGeneratorFactory factory : this.getKeyInfoGeneratorFactories()) {
                if (factory != null) {
                    manager.registerFactory(factory);
                }
            }
        }
    }
}
